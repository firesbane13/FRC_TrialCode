// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import frc.robot.hardware.YamlConfig;
import frc.robot.subsystems.TankDrive;

import java.io.InputStream;

/**
 * The VM is configured to automatically run this class, and to call the functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the name of this class or
 * the package after creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  TankDrive mDrive = new TankDrive();
  Joystick joystick01 = new Joystick(Constants.JOYSTICK01);

  Timer mTimer = new Timer();

  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  @Override
  public void robotInit() {
    // Flush NetworkTables every loop. This ensures that robot pose and other values
    // are sent during every iteration.
    setNetworkTablesFlushEnabled(true);
    
    /**
     * Future project to get configuration from a YAML file vs the Constants.java file.
     */
    try {
      InputStream input = Robot.class.getResourceAsStream("config/AuPiratesBase.yml");
      YamlConfig baseConfig = YamlConfig.loadFrom(input);
      input.close();

      // System.out.println("config: ");
      // System.out.println(baseConfig.toString());
    } catch(Exception e) {
      System.out.println("There's an error!");
      e.printStackTrace();
    }
  }

  /**
   * This function is called every robot packet, no matter the mode. Use this for items like
   * diagnostics that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before LiveWindow and
   * SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {
    mDrive.periodic();
  }

  /**
   * This autonomous (along with the chooser code above) shows how to select between different
   * autonomous modes using the dashboard. The sendable chooser code works with the Java
   * SmartDashboard. If you prefer the LabVIEW Dashboard, remove all of the chooser code and
   * uncomment the getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to the switch structure
   * below with additional strings. If using the SendableChooser make sure to add them to the
   * chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    mTimer.reset();
    mTimer.start();
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
    double elapsed = mTimer.get();
  }

  /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {
    mTimer.reset();
    mTimer.start();
  }

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {
    double elapsed = mTimer.get();
    
    double leftSpeed = joystick01.getRawAxis(1);
    double rightSpeed = joystick01.getRawAxis(5);

    mDrive.drive(leftSpeed, rightSpeed);
  }

  /** This function is called once when the robot is disab5led. */
  @Override
  public void disabledInit() {
    // Generated by create project script.
  }

  /** This function is called periodically when disabled. */
  @Override
  public void disabledPeriodic() {
    // Generated by create project script.
  }

  /** This function is called once when test mode is enabled. */
  @Override
  public void testInit() {
    // Generated by create project script.
  }

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {
    // Generated by create project script.
  }
  
  /** This function is called once when test mode is enabled. */
  @Override
  public void simulationInit() {
    // Generated by create project script.
  }

  /** This function is called periodically during test mode. */
  @Override
  public void simulationPeriodic() {
    mDrive.simulationPeriodic();
  }
}
